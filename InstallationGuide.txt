
This project was entirely written in Java, so you are only required 
to install the Java environment to be able to run and build the project.
However, should you wish to run the pre-processing script for the dataset, 
you are also required to install the Python environment. 

--------------------------------------------------------------------------------------

Environment installation (Java)*:
*Note: Needed to run and build the project.

1. Install OpenJDK 11 or 17. This project was originally built on OpenJDK 11, 
    but OpenJDK 17 will do since Java JDK is backward compatible.
    - Linux: 
        https://dev.to/mumu/windows-subsystem-for-linux-java-setup-2b2b?utm_source=pocket_mylist 
        > sudo apt update
        > sudo apt install openjdk-11-jdk 
            or
          sudo apt install openjdk-17-jdk
    - Windows: 
        https://www.oracle.com/java/technologies/downloads/#jdk17-windows
        https://knowledge.exlibrisgroup.com/Aleph/Knowledge_Articles/How_to_Download_and_Install_OpenJDK_11_on_Windows_10_PC_for_Aleph 

2. Find out where the JDK is installed.
    - Linux:    
        > readlink -f $(which java)
        will output something similar to: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
    - Windows
        Check your installation path. By default, it should refer to C:\Program Files. 
        Find "C:\Program Files\Java" and confirm your installation by checking the existence of 
            the JDK there. 

3. Setup your environment variable and configure the PATH env variable
    - Linux: 
        > nano ~/.bashrc  OR vi ~/.bashrc  as ROOT user
            will enable you to edit .bashrc file. 
            Add this line to the end of the  file to add the JAVA_HOME variable to your env: 
            export JAVA_HOME=/path/to/your/jdk/excluding/the/bin/folder
            Example: 
            export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
        > source ~/.bashrc
            refresh the change in the terminal
    - Windows:             

4. Verify whether Java is installed already. 
    > java --version

5. Install maven. Maven is a build tool that you can use for compiling, running unit or integration tests, 
    deploying you your code locally and remotely, etc. This project is Maven-based. 
    Linux: 
    > sudo apt install maven 

6. Verify whether maven is already installed. 
    Linux: 
    > mvn --version

7. Build and run the project 
    > mvn compile -e
        will compile the project and show errors in case it fails
    > mvn clean package
        will build a clean package in the "target" folder in form of "jar" file
    > javac /path/to/your/file.java -cp /path/to/your/jar/dependency/file
        will compile a specific file with given dependencies
    > javac /path/to/your/file -cp /path/to/your/jar/dependency/file
        will run the file with given dependencies. RUN THIS COMMAND FROM src/.../java folder, or else it won't work 
    > java -jar {jar_file_name}.jar
        will run the compiled file. By default, the compiled file will be located in "target/" folder, 
        but it's not recommended to run the file this way because system will ask you to 
        refer to the dependencies.
    > mvn install -e
        download & install dependencies defined in pom.xml
    > mvn -Dmaven.test.skip=true -DskipTests=true clean install
        clean install maven 
    > mvn assembly:assembly -DdescriptorId=jar-with-dependencies
        assembly a new jar file, packed with dependencies. Run this to get an executable jar file.
        You may later run the file by executing java -jar path/to/the/file.jar
        By default the assembled package will be located in target/ folder 
        under the name course-scheduling-1.0-jar-with-dependencies.jar
    > mvn dependency:copy-dependencies
        copy dependencies from M2_HOME folder (in Linux, usually located in /home/user_name/.m2/repository) to target/dependency folder
        
8. Alternative: Install NetBeans as your IDE. It runs much faster than iDEA on low to mid-end computer 
    Windows: 
        https://netbeans.apache.org/download/nb126/nb126.html 
        WSL2 configuration: 
            To use NetBeans with WSL, you have to allow Windows to use UNC path ("//wsl..."). 
            To do this, you may 
            add a registry key to disable UNC check.
            https://www.ibm.com/support/pages/disableunccheck-registry-key-created-during-rational-synergy-installation 
            - go to Registry Editor under 'HKEY_LOCAL_MACHINE'
            - find "\SOFTWARE\Microsoft\Command Processor\" path  
            - add 'DisableUNCCheck' key, value=1, hexadecimal 
            - rerun the project (Shift + F6)


How to run the Java project*: 
*Note: make sure to install the environment first

1. If you are using Maven
    > mvn assembly:assembly -DdescriptorId=jar-with-dependencies
        build the jar file
    > java -jar target/course-scheduling-1.0-jar-with-dependencies.jar
        run the jar file. By default the jar file you built will be located in the target folder,
        but there is a default jar file for you to run in the root directory. 
    
2. If you are using a dedicated Java editor: 
    - Install OpenJDK 11/17 and connect them with your editor.
    - Make sure to install all the dependencies specified in pom.xml. 
        Every editor has their own installation way so I can't mention the steps.
    - Netbeans: Click on the play button to run the whole program. 

--------------------------------------------------------------------------------------

Environment installation (Python)*:
*Note: This environment installation is not needed if you do not wish to run the dataset pre-processing scripts. 
 
1. Run the "installPython.sh" script (located in src/scripts/) through your command line.
    This script will automatically install python3, python3-pip, and python3-venv apps in your env. 
    It will also install pandas packages.

2. Install the packages one by one manually
    Linux: 
    # install python3, pip, and venv (virtual environment)
    > sudo apt install python3
    > sudo apt install python3-pip
    > sudo apt install python3-venv

    # Pandas: Python package, providing fast, flexible, and expressive data structures
    > pip install pandas

How to run the Python project from command line: 
1. Make sure that python3 and the required packages are already installed. 
    Linux: 
    > pip show pandas 
        will show the pandas package and its version
    > python3 -v
        will show the version of installed python3

(1.5) Optional: create the virtual environment. 
    The script is lightweight and the scope is small so its not needed, but doing it is a good practice.
    https://docs.python.org/3/library/venv.html
    Linux: 
    > python3 -m venv path/to/your/env

2. Run the corresponding script for each dataset.
    Linux: 
    > python3 courses.py
        will run the script to produce courses.csv dataset, and so on. 






    



    

