
How to experiment with the project:

1. GA algorithm
    There are 2 kinds of parameters to play with in the GA project. 
    The first set of parameters is located in Data.java. These parameters are:
        boolean isExperimentMode = true or false;
            when enabled, system will access experimental datasets (courses_small, courses_medium, courses_large)
            when disabled, system will access the original dataset (courses.csv)
        int experimentType = 1 or 2 or 3. 
            1 will execute the "courses_small" dataset;
            2 for "courses_medium" dataset;
            and 3 for "courses_large" dataset.
            
    The second set of parameters is located in Scheduler.java. These parameters are: 
        public static final double TARGET_FITNESS = 1.0;
            adjust your desired fitness value. System will stop regenerating schedules 
                when the value is already reached.
        public static final int TARGET_PENALTY = 50;
            adjust your desired penalty value. System will stop regenerating schedules 
                when the value is already reached.
        public static final int TARGET_TIMER_MINUTES = 15;
            adjust your desired fitness value. System will stop regenerating schedules 
                when the value is already reached.
        public static final int POPULATION_SIZE = 10;
            adjust the number of populations
        public static final double MUTATION_RATE = 0.8;
            adjust the mutation rate. Our experiments show that higher mutation rate is more effective to produce low penalty
        public static final double CROSSOVER_RATE = 0.2;
            adjust the crossover rate. Our experiments show that low crossover rate is more effective to produce low penalty
        public static final int TOURNAMENT_SELECTION_SIZE = 3;
            adjust the number of populations selected to be competed
        public static final int NUMB_OF_ELITE_SCHEDULES = 1;
            adjust the number of elite schedules


2. PSO algorithm
All adjustable parameters are accessible in App.java (located in package com.course_scheduling.app, the path directory is src\main\java\com\course_scheduling\app\App.java).

the function to call is app.runPsoAlgorithm(String datasetSize, String psoMode, int psoLimit, int psoParticles)

example :
	app.runPsoAlgorithm("small", "limitFV", 100, 30);
	app.runPsoAlgorithm("medium", "limitIter", 5000, 30);

Parameters:
	1. datasetSize :
		possible values are "small", "medium", "large", "default".
		"small" will use the course_small.csv dataset (1 group, 13 courses)
		"medium" will use the course_medium.csv dataset (4 groups, 52 courses)
		"large" will use the course_large.csv dataset (8 groups, 104 courses)
		any other value will use courses.csv dataset (50 groups, 650 courses)
	2. psoMode:
		possible values are "limitFV" and "limitIter"
		"limitFV" will stop the iterations when the global best penalty is lower than the specified psoLimit, or when the execution time exceeds 15 minutes.
		"limitIter" will stop the iterations when the iterations reaches the specified psoLimit, or when the execution time exceeds 15 minutes.
	3. psoLimit:
		the max penalty score for operation mode "limitFV", or
		the max iteration for operation mode "limitIter"
		recommendations:
		"limitFV" ... for datasetSize="small", psoLimit is recommended to be 725. no recommendations for "medium", "large", and "default".
		"limiIter" ... psoLimit is recommended to be 1000.
	4. psoParticles:
		the number of particles to be used. recommended is 30.

* Comparing FV Values
Since FV is calculated by the formula (1/sum_of_penalty), we want to maximize the FV. Greater FV mean better quality of the result.
